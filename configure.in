AC_INIT(src/xspd/xspd.c)

AM_INIT_AUTOMAKE(xsp,0.1)

AM_CONFIG_HEADER(include/config.h)

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_RANLIB
AM_PROG_CC_C_O

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h malloc.h netdb.h netinet/in.h netinet/in_systm.h stdint.h stdlib.h string.h strings.h sys/param.h sys/queue.h sys/socket.h sys/time.h unistd.h values.h sys/sendfile.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

# Checks for libraries.
AC_CHECK_LIB([dl], [dlopen], DL_LIBS="$DL_LIBS -ldl")
AC_CHECK_LIB([m], [ceilf])
AC_CHECK_LIB([pthread], [pthread_mutex_init], THREAD_LIBS="$THREAD_LIBS -lpthread")
AC_CHECK_LIB([c_r], [pthread_mutex_init], THREAD_LIBS="$THREAD_LIBS -pthread -lc_r")
AC_CHECK_LIB([rt], [sem_init], use_rt=yes)

AM_CONDITIONAL(HAVE_LIBRT, test x$use_rt = xyes)


# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_CHECK_FUNCS([atoll atoq bzero gethostbyaddr gethostbyname gethostname gettimeofday inet_ntoa memset select socket strcasecmp strchr strdup strerror strlcat strlcpy strstr strtoul strtoll inet_ntop])

AH_TEMPLATE(SOCKLEN_T, The native socklen_t type used on the platform)
AC_DEFINE_UNQUOTED(SOCKLEN_T, socklen_t)

AC_ARG_ENABLE(debug,
		[  --enable-debug          turn on debugging],
		[CFLAGS="-g -Wall -DDEBUG ${CFLAGS}"])

AC_ARG_ENABLE(netlogger,
		[  --enable-netlogger	  turn on netlogger],
		[CFLAGS="-g -Wall -DNETLOGGER ${CFLAGS}" NL_LIBS="-lnl -lnlio"])
		
AC_ARG_ENABLE(globus,
        [  --enable-globus     turn on globus],
        [CFLAGS="-DHAVE_GLOBUS ${CFLAGS}"])		

AC_ARG_ENABLE(client,
        AC_HELP_STRING([--enable-client], [enable xsp client [default=no]]),
        [enable_client=$enableval],
        [enable_client=no])

AM_CONDITIONAL(ENABLE_CLIENT, test x$enable_client = xyes)

AC_ARG_ENABLE(terapaths,
        AC_HELP_STRING([--enable-terapaths], [enable terapaths support [default=no]]),
        [enable_terapaths=$enableval],
        [enable_terapaths=no])

AM_CONDITIONAL(ENABLE_TERAPATHS, test x$enable_terapaths = xyes)

AC_ARG_ENABLE(nlmi,
        AC_HELP_STRING([--enable-nlmi], [enable NLMI support [default=no]]),
        [enable_nlmi=$enableval],
        [enable_nlmi=no])

AM_CONDITIONAL(ENABLE_NLMI, test x$enable_nlmi = xyes)

AC_ARG_ENABLE(globus-xio,
        AC_HELP_STRING([--enable-globus-xio], [enable GLOBUS XIO XFER support [default=no]]),
        [enable_globus_xio=$enableval],
        [enable_globus_xio=no])

AM_CONDITIONAL(ENABLE_GLOBUS_XIO, test x$enable_globus_xio = xyes)

AC_ARG_ENABLE(photon,
        AC_HELP_STRING([--enable-photon], [enable photon support [default=no]]),
        [enable_photon=$enableval],
        [enable_photon=no])

AM_CONDITIONAL(ENABLE_PHOTON, test x$enable_photon = xyes)

AC_ARG_ENABLE(oscars,
        AC_HELP_STRING([--enable-oscars], [enable oscars support [default=no]]),
        [enable_oscars=$enableval],
        [enable_oscars=no])

AM_CONDITIONAL(ENABLE_OSCARS, test x$enable_oscars = xyes)

AC_ARG_ENABLE(dragon,
        AC_HELP_STRING([--enable-dragon], [enable dragon support [default=no]]),
        [enable_dragon=$enableval],
        [enable_dragon=no])

AM_CONDITIONAL(ENABLE_DRAGON, test x$enable_dragon = xyes)

#AC_ARG_ENABLE(udt-embed,
#	AC_HELP_STRING([--enable-udt-embed], [compile UDT into the daemon instead of as a module [default=no]]),
#	enable_udt_embed=yes,
#	enable_udt_embed=no)
#
#AC_MSG_CHECKING(for embedded UDT) 
#if test "$enable_udt_embed" == "no"; then
#	AC_MSG_RESULT(no)
#else
#	AC_MSG_RESULT(yes)
#fi 
#
#
#AM_CONDITIONAL(EMBED_UDT, test x$enable_udt_embed = xyes)


dnl Check for Web100
AC_ARG_ENABLE(web100, AC_HELP_STRING([--disable-web100], [disable web100 support (default is autodetect)]),,enable_web100=try)
if test "$enable_web100" != "no" ; then
  
	AC_PATH_PROG([web100_config], [web100-config], [no]) 
  
	AC_MSG_CHECKING(for Web100) 
  
	if test "$web100_config" != "no"; then
		WEB100_CFLAGS=`$web100_config --cflags`
		WEB100_LIBS=`$web100_config --libs`
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
		if test "$enable_web100" = "yes"; then
			AC_MSG_ERROR(web100 not found)
		fi
	fi 

	AC_SUBST(WEB100_CFLAGS)
	AC_SUBST(WEB100_LIBS)
fi

AM_CONDITIONAL(HAVE_WEB100, test "${WEB100_CFLAGS}" != "")


dnl Check for LibXML
AC_PATH_PROG([xml2_config], [xml2-config], [no]) 
  
AC_MSG_CHECKING(for LibXML) 
  
if test "$xml2_config" != "no"; then
	LIBXML_CFLAGS=`$xml2_config --cflags`
	LIBXML_LIBS=`$xml2_config --libs`
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi 

AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_LIBS)

AM_CONDITIONAL(HAVE_LIBXML, test "${LIBXML_CFLAGS}" != "")

dnl End check for Web100

dnl Check for Netfilter
AH_TEMPLATE(HAVE_NETFILTER, Whether or not netfilter is used on the system)

dnl Check for prctl
AH_TEMPLATE(HAVE_SYS_PRCTL_H, Whether or not prctl is available)

AC_ARG_ENABLE(netfilter, [  --enable-netfilter      use netfilter for transparency [default=yes]], enable_netfilter=$enableval, enable_netfilter=try)

if test "$enable_netfilter" = "yes" -o "$enable_netfilter" = "try"; then
	AC_CHECK_HEADER(linux/netfilter.h, netfilter_header=yes, [], [ #include <netinet/in.h> ])
	if test "$netfilter_header" == "yes"; then
		AC_DEFINE(HAVE_NETFILTER)
	elif test "$enable_netfilter" = "yes"; then
		AC_MSG_ERROR(netfilter.h not found)
	fi
fi

AM_CONDITIONAL(HAVE_NETFILTER, test "$netfilter_header" == "yes")
dnl End check for Netfilter

dnl Check for MySQL
AH_TEMPLATE(HAVE_MYSQL, Whether or not mysql is used on the system)

AC_ARG_WITH([mysql], [  --with-mysql[=DIR]          use mysql in DIR], [], [with_mysql=try])
if test "$with_mysql" != "no"
then
	if test "$with_mysql" = "yes" -o "$with_mysql" = "try"; then
		AC_PATH_PROG(mysql_path, mysql_config)
		if test "$mysql_path" != ""; then
			MYSQL_LIBS=`$mysql_path --libs`
			MYSQL_CFLAGS=`$mysql_path --cflags`
		fi
	else
		if test -x $with_mysql/mysql_config; then
			MYSQL_LIBS=`$with_mysql/mysql_config --libs`
			MYSQL_CFLAGS=`$with_mysql/mysql_config --cflags`
		elif test -x $with_mysql/bin/mysql_config; then
			MYSQL_LIBS=`$with_mysql/bin/mysql_config --libs`
			MYSQL_CFLAGS=`$with_mysql/bin/mysql_config --cflags`
		fi
	fi

	AC_MSG_CHECKING(for MySQL)

	if test "$MYSQL_CFLAGS" != ""; then
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
		if test "$with_mysql" != "try"; then
			AC_MSG_ERROR(mysql_config not found or not executable)
		fi
	fi
fi

AM_CONDITIONAL(HAVE_MYSQL, test "$MYSQL_CFLAGS" != "")
AC_SUBST(MYSQL_CFLAGS)
AC_SUBST(MYSQL_LIBS)

dnl Check for SQLite
AH_TEMPLATE(HAVE_SQLITE, Whether or not sqlite is used on the system)

AC_MSG_CHECKING(for SQLite)
AC_ARG_WITH(sqlite, [  --with-sqlite[=DIR]          use sqlite in DIR], , with_sqlite=try)
if test "$with_sqlite" != "no"
then
	if test "$with_sqlite" == "yes" -o "$with_sqlite" == "try"
	then
		if test -f /usr/include/sqlite3.h; then
	 		SQLITE_LIBS="-lsqlite3"
 			SQLITE_CFLAGS=""
		elif test -f /usr/local/include/sqlite3.h; then
	 		SQLITE_LIBS="-lsqlite3"
 			SQLITE_CFLAGS=""
		else
			AC_MSG_RESULT(no)
			if test "$with_sqlite" == "yes"; then
				AC_ERROR(sqlite3.h not found)
			fi
		fi
	elif test "$with_sqlite" != "no"
	then
		if test -f $with_sqlite/include/sqlite3.h; then
			SQLITE_LIBS="-L$with_sqlite/lib -lsqlite3"
			SQLITE_CFLAGS="-I$with_sqlite/include"
		else
			AC_MSG_RESULT(no)
			AC_ERROR(sqlite3.h not found)
		fi
	fi
fi
 
if test "$SQLITE_LIBS" != ""
then
 	AC_MSG_RESULT(yes)
fi

AM_CONDITIONAL(HAVE_SQLITE, test "$SQLITE_LIBS" != "")
AC_SUBST(SQLITE_CFLAGS)
AC_SUBST(SQLITE_LIBS)

#dnl Check for Libudt
#AC_MSG_CHECKING(for udt)
#AC_ARG_WITH(udt, [  --with-udt[=DIR]          use udt in DIR])
#
#if test "$with_udt" == "yes"
#then
#	if test -f /usr/include/udt_c_wrapper.h; then
#		UDT_INCLUDES="-I/usr/include"
#	elif test -f /usr/local/include/udt_c_wrapper.h; then
#		UDT_INCLUDES="-I/usr/local/include"
#	else
#		AC_MSG_RESULT(no)
#		AC_ERROR(udt_c_wrapper.h not found)
#	fi
#
#	if test -f /usr/lib/libudt.a; then
#		UDT_LDFLAGS="-L/usr/lib -ludt"
#	elif test -f /usr/lib/libudt.so; then
#		UDT_LDFLAGS="-L/usr/lib -ludt"
#	elif test -f /usr/local/lib/libudt.a; then
#		UDT_LDFLAGS="-L/usr/local/lib -ludt"
#	elif test -f /usr/local/lib/libudt.so; then
#		UDT_LDFLAGS="-L/usr/local/lib -ludt"
#	else
#		AC_MSG_RESULT(no)
#		AC_ERROR(libudt not found)
#	fi
#
#	AC_MSG_RESULT(yes)
#elif test "$with_udt" != "no" -a "$with_udt" != ""
#then
#	if test -f $with_udt/udt_c_wrapper.h; then
#		UDT_INCLUDES="-I$with_udt"
#	elif test -f $with_udt/include/udt_c_wrapper.h; then
#		UDT_INCLUDES="-I$with_udt/include"
#	else
#		AC_MSG_RESULT(no)
#		AC_ERROR(udt_c_wrapper.h not found)
#	fi
#
#	if test -f $with_udt/libudt.a; then
#		UDT_LDFLAGS="-L$with_udt -ludt"
#	elif test -f $with_udt/libudt.so; then
#		UDT_LDFLAGS="-L$with_udt -ludt"
#	elif test -f $with_udt/lib/libudt.a; then
#		UDT_LDFLAGS="-L$with_udt/lib -ludt"
#	elif test -f $with_udt/lib/libudt.so; then
#		UDT_LDFLAGS="-L$with_udt/lib -ludt"
#	else
#		AC_MSG_RESULT(no)
#		AC_ERROR(libudt not found)
#	fi
#
#fi

#if test "$with_udt" != "" ; then
#	AC_MSG_RESULT($with_udt)
#else
#	AC_MSG_RESULT(no)
#fi
#
#AC_SUBST(UDT_INCLUDES)
#AC_SUBST(UDT_LDFLAGS)
#AM_CONDITIONAL(HAVE_UDT, test "${UDT_INCLUDES}" != "")
#dnl End check for Libudt

dnl Check for OpenSSL
AC_ARG_ENABLE(openssl, AC_HELP_STRING([--disable-openssl], [disable OpenSSL support (default is autodetect)]),[enable_openssl=$enableval],[enable_openssl=try])

if test "$enable_openssl" != "no" ; then
	AH_TEMPLATE(HAVE_OPENSSL, Whether or not OpenSSL is installed on the system)
	AC_CHECK_LIB(ssl, main, [
		AC_CHECK_HEADERS(openssl/ssl.h, [
			SSL_LIBS="-lssl -lcrypto"
			AC_SUBST(SSL_LIBS)
			have_openssl=yes
		])
	])

	if test "$have_openssl" == "yes"; then
		AC_DEFINE(HAVE_OPENSSL,, Build with OpenSSL support)
	fi
fi

dnl Check for compiling with phoebus-xsp style client
AH_TEMPLATE(HAVE_PHOEBUS, Whether or not compiling with Phoebus)
AC_ARG_ENABLE(phoebus-xsp,
                [  --enable-phoebus-xsp     enable Phoebus-style XSP client wrapper [default=no]],
                [
                  enable_phoebus_xsp=$enableval
                  AC_DEFINE(HAVE_PHOEBUS)
                ])

AM_CONDITIONAL(HAVE_PHOEBUS, test "$enable_phoebus_xsp" == "yes")

dnl Check for Globus
AM_CONDITIONAL(HAVE_GLOBUS, test "${GLOBUS_INCLUDES}" != "")
dnl End check for Globus


CONFIG_FILE=$sysconfdir/xspd.conf
AC_SUBST(CONFIG_FILE)

moduledir=$libdir/modules
AC_SUBST(moduledir)

AC_SUBST(THREAD_LIBS)
AC_SUBST(DL_LIBS)
AC_SUBST(NL_LIBS)

AC_CONFIG_SUBDIRS(libconfig)

AC_OUTPUT(
	Makefile
	libradix/Makefile
	libbson/Makefile
	libgsoap/Makefile
	src/libxsp/Makefile
	src/xspd/Makefile
	src/modules/Makefile
	src/libxsp_common/Makefile
	src/libxsp_modules/Makefile
	src/libxsp_modules/terapaths/Makefile
	src/libxsp_modules/oscars/Makefile
	src/libxsp_modules/monitoring/Makefile
	src/libxsp_client/Makefile
	test/Makefile
	)
