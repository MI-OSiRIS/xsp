// =============================================================================
//  DAMSL (xsp)
//
//  Copyright (c) 2010-2016, Trustees of Indiana University,
//  All rights reserved.
//
//  This software may be modified and distributed under the terms of the BSD
//  license.  See the COPYING file for details.
//
//  This software was created at the Indiana University Center for Research in
//  Extreme Scale Technologies (CREST).
// =============================================================================

// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* mntr.h
   Generated by wsdl2h 2.8.1 from http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/?wsdl and typemap.dat
   2011-02-15 02:43:01 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on mntr.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt cw

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/"
//gsoap ns1   schema namespace:	http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/           *
 *                                                                            *
\******************************************************************************/


/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":remove_pathResponse is a complexType.
struct ns1__remove_USCOREpathResponse {
/// Element remove_pathResult of type xs:string.
  char*                                remove_USCOREpathResult        1;	///< Required element.
};

/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":new_path is a complexType.
struct ns1__new_USCOREpath {
/// Element newpath of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":PathData.
  struct ns1__PathData*                newpath                        1;	///< Required element.
};

/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":status_pathResponse is a complexType.
struct ns1__status_USCOREpathResponse {
/// Element status_pathResult of type xs:string.
  char*                                status_USCOREpathResult        1;	///< Required element.
};

/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":status_path is a complexType.
struct ns1__status_USCOREpath {
/// Element path of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":PathData.
  struct ns1__PathData*                path                           1;	///< Required element.
};

/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":PathData is a complexType.
struct ns1__PathData {
/// Element status of type xs:string.
  char*                                status                         0;	///< Optional element.
/// Element src of type xs:string.
  char*                                src                            0;	///< Optional element.
/// Element direction of type xs:string.
  char*                                direction                      0;	///< Optional element.
/// Element src_port_range of type xs:string.
  char*                                src_USCOREport_USCORErange     0;	///< Optional element.
/// Element start_time of type xs:int.
  int*                                 start_USCOREtime               0;	///< Optional element.
/// Element path_id of type xs:string.
  char*                                path_USCOREid                  0;	///< Optional element.
/// Element dst_port_range of type xs:string.
  char*                                dst_USCOREport_USCORErange     0;	///< Optional element.
/// Element bandwidth of type xs:int.
  int*                                 bandwidth                      0;	///< Optional element.
/// Element duration of type xs:int.
  int*                                 duration                       0;	///< Optional element.
/// Element bw_class of type xs:string.
  char*                                bw_USCOREclass                 0;	///< Optional element.
/// Element dst of type xs:string.
  char*                                dst                            0;	///< Optional element.
/// Element vlan_id of type xs:string.
  char*                                vlan_USCOREid                  0;	///< Optional element.
};

/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":new_pathResponse is a complexType.
struct ns1__new_USCOREpathResponse {
/// Element new_pathResult of type xs:string.
  char*                                new_USCOREpathResult           1;	///< Required element.
};

/// "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":remove_path is a complexType.
struct ns1__remove_USCOREpath {
/// Element pathid of type xs:string.
  char*                                pathid                         1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":new_pathResponse of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":new_pathResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":PathData of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":PathData.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":status_pathResponse of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":status_pathResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":remove_pathResponse of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":remove_pathResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":remove_path of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":remove_path.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":status_path of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":status_path.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":new_path of type "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/":new_path.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	MonitoringApp
//gsoap ns1  service type:	MonitoringApp
//gsoap ns1  service port:	http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/?wsdl
//gsoap ns1  service namespace:	http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http

/** @mainpage MonitoringApp Definitions

@section MonitoringApp_bindings Service Bindings

  - @ref MonitoringApp

@section MonitoringApp_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page MonitoringApp Binding "MonitoringApp"

@section MonitoringApp_operations Operations of Binding  "MonitoringApp"

  - @ref __ns1__new_USCOREpath

  - @ref __ns1__remove_USCOREpath

  - @ref __ns1__status_USCOREpath

@section MonitoringApp_ports Endpoints of Binding  "MonitoringApp"

  - http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/?wsdl

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MonitoringApp                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__new_USCOREpath                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__new_USCOREpath" of service binding "MonitoringApp"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="new_path"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__new_USCOREpath(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__new_USCOREpath*         ns1__new_USCOREpath,
    // response parameters:
    struct ns1__new_USCOREpathResponse* ns1__new_USCOREpathResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__new_USCOREpath(
    struct soap *soap,
    // request parameters:
    struct ns1__new_USCOREpath*         ns1__new_USCOREpath,
    // response parameters:
    struct ns1__new_USCOREpathResponse* ns1__new_USCOREpathResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	new_USCOREpath document
//gsoap ns1  service method-encoding:	new_USCOREpath literal
//gsoap ns1  service method-action:	new_USCOREpath new_path
int __ns1__new_USCOREpath(
  struct ns1__new_USCOREpath*         ns1__new_USCOREpath,	///< Request parameter
  struct ns1__new_USCOREpathResponse* ns1__new_USCOREpathResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__remove_USCOREpath                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__remove_USCOREpath" of service binding "MonitoringApp"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="remove_path"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__remove_USCOREpath(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__remove_USCOREpath*      ns1__remove_USCOREpath,
    // response parameters:
    struct ns1__remove_USCOREpathResponse* ns1__remove_USCOREpathResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__remove_USCOREpath(
    struct soap *soap,
    // request parameters:
    struct ns1__remove_USCOREpath*      ns1__remove_USCOREpath,
    // response parameters:
    struct ns1__remove_USCOREpathResponse* ns1__remove_USCOREpathResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	remove_USCOREpath document
//gsoap ns1  service method-encoding:	remove_USCOREpath literal
//gsoap ns1  service method-action:	remove_USCOREpath remove_path
int __ns1__remove_USCOREpath(
  struct ns1__remove_USCOREpath*      ns1__remove_USCOREpath,	///< Request parameter
  struct ns1__remove_USCOREpathResponse* ns1__remove_USCOREpathResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__status_USCOREpath                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__status_USCOREpath" of service binding "MonitoringApp"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="status_path"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__status_USCOREpath(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    struct ns1__status_USCOREpath*      ns1__status_USCOREpath,
    // response parameters:
    struct ns1__status_USCOREpathResponse* ns1__status_USCOREpathResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__status_USCOREpath(
    struct soap *soap,
    // request parameters:
    struct ns1__status_USCOREpath*      ns1__status_USCOREpath,
    // response parameters:
    struct ns1__status_USCOREpathResponse* ns1__status_USCOREpathResponse
  );
@endcode

*/

//gsoap ns1  service method-style:	status_USCOREpath document
//gsoap ns1  service method-encoding:	status_USCOREpath literal
//gsoap ns1  service method-action:	status_USCOREpath status_path
int __ns1__status_USCOREpath(
  struct ns1__status_USCOREpath*      ns1__status_USCOREpath,	///< Request parameter
  struct ns1__status_USCOREpathResponse* ns1__status_USCOREpathResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://blackseal.damsl.cis.udel.edu/escpscope/monitor-service/"

  - <ns1:new_pathResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:PathData> (use wsdl2h option -g to auto-generate)

  - <ns1:status_pathResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:remove_pathResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:remove_path> (use wsdl2h option -g to auto-generate)

  - <ns1:status_path> (use wsdl2h option -g to auto-generate)

  - <ns1:new_path> (use wsdl2h option -g to auto-generate)

*/

/* End of mntr.h */
